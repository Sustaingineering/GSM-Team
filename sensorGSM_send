/* Defining PIN assignment
  // Voltage Sensor circuit
      A1 - Voltage Divider
  // Current Sensor circuit
      A0 - Hall Effect sensor
  // Temperature Sensor circuit
      A2 - Temperature sensor
  // SD Card Module SPI bus circuit
      pin 11 - MOSI
      pin 12 - MISO
      pin 13 - CLK
      pin 10 - CS (depends on your SD card shield or module, 4 used here)
  // Relay circuit
      pin 9 - Relay PWM pin
  // Timer pins
      A4 - SDA
      A5 - SCL
  // LED Test Interface
      pin 2 - Arduino ON/OFF
      pin 3 - Voltage reading
      pin 5 - Current reading
      pin 7 - Relay Open/Close LED
*/

//By Rico Jia, May 16, 2018

//SG_FONA folder must be included in \Documents\Arduino\libraries
//Arduino must be set to port 1. Go to device manager -> Ports(COM & LPT) -> Arduino Uno -> Properties -> Port Settings -> Advanced -> COM Port Number. Then re-plug the USB.
//Serial may need to be set to 4800bps manually first. On my device, this was the default.
//Serial Monitor must be set to Both NL & CR, as well as 115200 Baud
//Many cell carriers do not support GSM. Only supported network may be Rogers (this will be shutting down soon)

//For more on interrupts, see https://www.robotshop.com/letsmakerobots/arduino-101-timers-and-interrupts
#include "SG_FONA.h"
volatile char ISR_Count=0;

//Optional header file to enable I/O to the EEPROM memory
/* #include <EEPROM_R_W.h>
   EEPROM_R_W eeprom = EEPROM_R_W(); */

// Header files
#include <SPI.h>
#include "SdFat.h"
#include <Wire.h>
#include "DS3231.h"

RTClib RTC;
SdFat SD;

// Function prototype
void send_sms(double SourceVoltage, double HallAmps, double Temp);

#define FONA_TX 4   //Soft serial port
#define FONA_RX 5   //Soft serial port
#define FONA_RI 3
#define FONA_RST 9

#define FONA_POWER 8
#define FONA_POWER_ON_TIME  180   //180ms
#define FONA_POWER_OFF_TIME 1000  //1000ms

char sendto[21] = "7783173724";   //IMPORTANT: Enter destination number here

/* We default to using software serial. If you want to use hardware serial
 * (because softserial isnt supported) comment out the following three lines 
 * and uncomment the HardwareSerial line */
 
#include <SoftwareSerial.h>
SoftwareSerial fonaSS = SoftwareSerial(FONA_TX,FONA_RX);
SoftwareSerial *fonaSerial = &fonaSS;

//Hardware serial is also possible!
//HardwareSerial *fonaSerial = &Serial1;

//Use this for FONA 800 and 808s
//Adafruit_FONA fona = Adafruit_FONA(FONA_RST);

//Use this one for FONA 3G
Adafruit_FONA_3G fona = Adafruit_FONA_3G(FONA_RST);

uint8_t readline(char *buff, uint8_t maxbuff, uint16_t timeout = 0);

uint8_t type;

volatile int8_t numsms;

//Global variables
//Voltage Sensor
double DivVoltage = 0;       //Voltage divider reading
double SourceVoltage = 0;    //Final voltage reading result

//Current Sensor
double HallVoltage = 0;      
double HallAmps = 0;         

//Temperature Sensor
double TempVolt = 0;         //Previously volt
double Temp = 0;             //Previously temp

//Data LoggingFile myFile;
unsigned long Time;

//Relay Circuit
int RelayTest;
 
//Declare any global constants
double RH = 981300;         //Voltage Divider High Resistance
double RL = 24743;          //Voltage Divider Low Resistance

void setup() {

// Defining LED Interface pins (may have pin overlap issues!)
/* pinMode(2,OUTPUT);    // Arduino On LED
 * pinMode(3,OUTPUT);    // Voltage LED
 * pinMode(0,OUTPUT);    // Current LED
 * pinMode(7,OUTPUT);    // Relay Open/Close LED
 * pinMode(9,OUTPUT);    // Relay Control Pin 
 */

  pinMode(FONA_POWER, OUTPUT);
  pinMode(FONA_RI, INPUT);
  digitalWrite(FONA_POWER, HIGH);
  delay(FONA_POWER_ON_TIME);
  digitalWrite(FONA_POWER, LOW);
  delay(3000);   

 //Wire.begin();      //Initiate the Wire library and join the I2C bus as a master or slave
  while (!Serial);    //Wait until serial gets initialized

  Serial.begin(4800);

//SD Initialization
 /* Serial.println("Initializing SD card...");
  * if (!SD.begin(10)) {
  * Serial.println("initialization failed!");
  * while (1);
  }
  * Serial.println("initialization done.");
  */

  Serial.println(F("Welcome to Sustaingineering 3G TxRx."));
  Serial.println(F("Initializing...."));

  fonaSerial->begin(4800);
  while (!fona.begin(*fonaSerial)) {
    Serial.println(F("Cannot find FONA."));     //Reboot arduino and fona if this shows up
    delay(1000);
  }
  type = fona.type();
  Serial.println(F("FONA is OK!"));

  Serial.println(F("Searching for network...\n"));
  bool SIMFound=false;
  for (int countdown=600;countdown>=0&&SIMFound==false;countdown--){
    //Serial.print(F("Countdown: "));
    //Serial.println(countdown);
    uint8_t n = fona.getNetworkStatus();      //Constantly check until network is connected
    if (n == 1) 
    {
      SIMFound=true;
      Serial.println(F("Network found. Reading SIM card...")); // If program hangs here, SIM card cannot be read/connect to network
      Serial.println(F("Network Connected")); 
      delay(3000);
    }
  // uint8_t m = fona.setSMSInterrupt(1);    // this is for setting up the Ring Indicator Pin
  }
  if(!SIMFound)
  {
    Serial.println(F("SIM card could not be found. Please ensure that your SIM card is compatible with dual-band UMTS/HSDPA850/1900MHz WCDMA + HSDPA."));
    while(1){}
  }
}
void loop() {
  
  /* Current Sensor */
  HallEffect();

  /* Voltage Divider */
  VoltageDivider();

  /* Relay */
  //RelaySwitch();

  /* Temperature Sensor */
  Thermolcouple();

  /* LED Interface Control Testing */
  //LEDInterface();

  /* Displaying Sensor Results */
  DisplayResults();

  /* Data Logging */
  //SDLog();

  //One second delay? - make saving to SD avg every 10s - + threshhold count
  //delay(1000);

  send_sms(SourceVoltage,HallAmps,Temp);
} 

void VoltageDivider() {
  //Read Voltage at divider and convert to decimal
  double x = analogRead(A1);
  DivVoltage = x * (5.0/1023.0);

  //Final Source Voltage reading
  SourceVoltage = (DivVoltage * (RH + RL)) / RL;
}

  //Hall Effect sensor
  void HallEffect() {
  double x = analogRead(A0);     // Take reading

  // Convert to decimal
  HallVoltage = x * (5.0/1023.0);

  // Compute the current from the voltage reading
  // Equation: ...
  HallAmps = (HallVoltage * 22.0)/3.0 - (55.0 / 3.0);
}

// Thermolcouple sensor
void Thermolcouple() {
  // Read sensor value and convert to mV
  double x = analogRead(A2);
  TempVolt = x * (5000.0/1023.0) + 25;

  // Check if upper voltage bound
  if(TempVolt > 2500) {
    double volt = TempVolt - 2500;    // Assuming cold junction at 22 degree
    volt = volt / 123;                // OpAmp amplified 150 times
    Temp = (volt / 0.041) + 25;       // 0.0404 mv/degree in K type
  }

  // Else if lower bound
  else {
    double volt = 2500 - TempVolt;    // Assuming cold junction at 22 degree
                                      // The voltage cross thermolcouple is 1.67v)
    volt = volt / 123;                // OpAmp apmplified 150 times
    Temp = 25 - (volt / 0.0404);      // 0.0404 mv/degree in K type
  }
}

// Display Results
void DisplayResults() {
  // Voltage divider voltage
  Serial.print("Divider Voltage = ");
  Serial.print(DivVoltage,3);

  // Panel voltage Result
  Serial.print("\t Source Voltage = ");
  Serial.print(SourceVoltage,3);

  // Hall Effect voltage reading
  Serial.print("\t Hall Voltage = ");
  Serial.print(HallVoltage,3);

  // Current reading
  Serial.print("\t Panel Current = ");
  Serial.print(HallAmps,3);

  // Panel temperature
  Serial.print("\t Panel Temperature = ");
  Serial.println(Temp);
}

// Relay Control
void RelaySwitch(){

  if(HallAmps > 1 || SourceVoltage > 1){
  analogWrite(9,255);
  }
  else{
  analogWrite(9,30);
  }
}

// LED Interface
void LEDInterface() {
  RelayTest = analogRead(9); // Checks if relay is closed
  Serial.print("\n Relay Test: ");
  Serial.print(RelayTest);
  Serial.print("\n");
  digitalWrite(2,HIGH);       // Arduino on light
  digitalWrite(3,LOW);        // Voltage light
  digitalWrite(5,LOW);        // Current light
  digitalWrite(7,LOW);        // Relay light

  if(SourceVoltage > 1)
    digitalWrite(3,HIGH);

  if(HallAmps > 0.5)
    digitalWrite(5, HIGH);

  if(RelayTest > 3)
    digitalWrite(7,HIGH);
}

// Log Results on SD
void SDLog() {
  // Open test file
  // The file name testNUM is the text file we write to
  myFile = SD.open("timertestreal15.txt", FILE_WRITE);

  // if the file opened okay, write to it
  if (myFile) {
    // Record time
     DateTime now = RTC.now();
    myFile.print("Time (s) = ");
    myFile.print(now.year(), DEC);
    myFile.print('/');
    myFile.print(now.month(), DEC);
    myFile.print('/');
    myFile.print(now.day(), DEC);
    myFile.print(' ');
    myFile.print(now.hour(), DEC);
    myFile.print(':');
    if(now.minute() < 10){
      myFile.print('0');
    }
    myFile.print(now.minute(), DEC);
    myFile.print(':');
    if(now.second() < 10){
      myFile.print('0');
    }
    myFile.print(now.second(), DEC);

    // Record divider voltage
    myFile.print("\t Divider Voltage = ");
    myFile.print(DivVoltage);

    // Record panel voltage
    myFile.print("\t Source Voltage = ");
    myFile.print(SourceVoltage);

    // Record hall effect voltage signal
    myFile.print("\t Hall Voltage = ");
    myFile.print(HallVoltage);

    // Record panel current
    myFile.print("\t Panel Current = ");
    myFile.print(HallAmps);

    // Record temperature (may add another)
    myFile.print("\t Panel Temperature = ");
    myFile.println(Temp);

    // close the file:
    myFile.close();
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening timertest10.txt");
  }
}

  //send an SMS
  void send_sms(double SourceVoltage, double HallAmps, double Temp) {      
  char message[0];
  bool loop = true;
  while(loop) {
    flushSerial();    //THIS IS IMPORTANT! OTHERWISE what you typed in might be missing in what you send
    loop = false;

    String str;
    str = (String)(SourceVoltage)+","+(String)(HallAmps)+","+(String)(SourceVoltage*HallAmps)+","+(String)(Temp);
    str.toCharArray(message, 141);
 }
  Serial.print(F("Your message is: ")); 
  Serial.println(message);
  Serial.print(F("Value of message sent status: "));
  
  if(fona.sendSMS(sendto, message)==0) {
    Serial.println(F("SMS sending failed."));
  }
  else {
    Serial.println(F("SMS sending succeeded!"));
  }
}

void flushSerial() {
  while (Serial.available())
    Serial.read();
}

uint8_t readline(char *buff, uint8_t maxbuff, uint16_t timeout) {
  uint16_t buffidx = 0;
  boolean timeoutvalid = true;
  if (timeout == 0) timeoutvalid = false;

  while (true) {
    if (buffidx > maxbuff) {
      //Serial.println(F("SPACE"));
      break;
    }

    while (Serial.available()) {
      char c =  Serial.read();

      //Serial.print(c, HEX); Serial.print("#"); Serial.println(c);

      if (c == '\r') continue;
      if (c == 0xA) {
        if (buffidx == 0)   // the first 0x0A is ignored. 
          continue;

        timeout = 0;         // the second 0x0A is the end of the line
        timeoutvalid = true;
        break;
      }
      buff[buffidx] = c;
      buffidx++;
    }

    if (timeoutvalid && timeout == 0) {
      //Serial.println(F("TIMEOUT"));
      break;
    }
    delay(1);
  }
  buff[buffidx] = 0;  // null term
return buffidx;
}
